{"version":3,"sources":["utils/assets/raspi.png","utils/socketHandler.ts","components/Terminal/Terminal.tsx","components/Supervision/Supervision.tsx","components/Accueil/Accueil.tsx","components/Navbar/Navbar.tsx","components/Home/Home.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","SocketHandler","Object","classCallCheck","this","createClass","key","value","event","data","socket","emit","e","console","log","callback","on","removeAllListeners","socketIOClient","Terminal","_useState","useState","_useState2","slicedToArray","historique","setHistorique","_useState3","_useState4","commandLine","setCommandLine","_useState5","visibleTermStatut","useEffect","listen","s","cmd","result","concat","toConsumableArray","openNotification","sendCommand","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","trim","stop","message","notification","open","description","react_default","createElement","Fragment","className","spin","spinning","tip","input","onKeyDown","keyCode","style","width","onChange","target","placeholder","map","m","k","icon","type","Panel","Collapse","Supervision","heat","setHeat","marginRight","height","alt","src","logoRaspi","card","size","title","color","collapse","header","defaultActiveKey","Accueil","Navbar","react_router_dom","menu","mode","Item","to","react_router","path","exact","component","Home","components_Navbar_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","components_Home_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dec59f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/raspi.04a1111c.png\";","import socketIOClient from \"socket.io-client\";\n\nexport class SocketHandler {\n  public static socket = socketIOClient(\"http://127.0.0.1:3030\");\n\n  public static emit(event: string, data: string) {\n    try {\n      this.socket.emit(event, data);\n    } catch (e) {\n      console.log(\"Error\", e);\n    }\n  }\n\n  public static listen(event: string, callback: (event: string) => void) {\n    this.socket.on(event, callback);\n  }\n\n  public static removeAllListeners() {\n    this.socket.removeAllListeners();\n  }\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Input, notification, Icon, Spin } from \"antd\";\nimport { IHistory } from \"../../interface/IHistory\";\nimport { SocketHandler } from \"../../utils/socketHandler\";\n\nimport \"./Terminal.css\";\n\nconst Terminal: React.FC = () => {\n  const [historique, setHistorique] = useState<IHistory[]>([]);\n  const [commandLine, setCommandLine] = useState(\"\");\n  const [visibleTermStatut] = useState(false);\n\n  useEffect(() => {\n    SocketHandler.listen(\"cmd return\", s => {\n      console.log(\"lol\", commandLine);\n      if (s !== \"wrongcmd\") {\n        setHistorique(historique => [\n          { cmd: commandLine, result: s },\n          ...historique\n        ]);\n        setCommandLine(\"\");\n      } else {\n        openNotification(\"Veuillez rentrer une commande valide !\");\n        setCommandLine(\"\");\n      }\n    });\n    //return SocketHandler.removeAllListeners;\n  }, []);\n\n  const onChangeCommandLine = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommandLine(event.target.value);\n  };\n\n  const sendCommand = useCallback(async () => {\n    if (commandLine === \"clear\") {\n      setHistorique([]);\n      setCommandLine(\"\");\n      return;\n    }\n    if (commandLine.trim() === \"\") {\n      openNotification(\"Veuillez rentrer une commande valide !\");\n      return;\n    }\n    //New version\n    SocketHandler.emit(\"cmd\", commandLine);\n  }, [commandLine]);\n\n  const sendCommandEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      if (commandLine.trim() === \"\") {\n        openNotification(\"Veuillez rentrer une commande valide !\");\n        return;\n      }\n      sendCommand();\n    }\n  };\n\n  const openNotification = (message: string) => {\n    notification.open({\n      message: \"Notification\",\n      description: message\n    });\n  };\n\n  return (\n    <>\n      <div className=\"terminal\">\n        <Spin\n          spinning={visibleTermStatut}\n          tip=\" \n          Impossible to connect to the socket.io server ...\"\n        >\n          <Input\n            onKeyDown={sendCommandEnter}\n            style={{ width: \"100%\" }}\n            value={commandLine}\n            onChange={onChangeCommandLine}\n            placeholder=\">\"\n          />\n        </Spin>\n\n        <div className=\"history\">\n          <code>\n            {historique.map((m, k) => (\n              <React.Fragment key={k}>\n                <Icon type=\"code\" />\n                <strong> {m.cmd}</strong>\n                <br />\n                <pre>{m.result}</pre>\n              </React.Fragment>\n            ))}\n          </code>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Terminal;\n","import React, { useEffect, useState } from \"react\";\nimport { Icon, Collapse, Card } from \"antd\";\nimport \"./Supervision.css\";\nimport logoRaspi from \"../../utils/assets/raspi.png\";\nimport { SocketHandler } from \"../../utils/socketHandler\";\n\nconst { Panel } = Collapse;\n\nconst Supervision: React.FC = () => {\n  const [heat, setHeat] = useState(\"\");\n\n  useEffect(() => {\n    SocketHandler.emit(\"raspi_snmp_heat\", \"/opt/vc/bin/vcgencmd measure_temp\");\n    SocketHandler.listen(\"cmd return\", s => {\n      console.log(s);\n      setHeat(s);\n    });\n    //return SocketHandler.removeAllListeners;\n  }, []);\n\n  return (\n    <>\n      <div className=\"title-raspi-super-vision\">\n        <h3>\n          <img\n            style={{ marginRight: \"0.4%\" }}\n            width=\"15\"\n            height=\"15\"\n            alt=\"raspberry\"\n            src={logoRaspi}\n          />\n          Raspberry monitoring\n        </h3>\n      </div>\n      <div className=\"monitoring-raspi\">\n        <Card size=\"small\" title=\"Monitoring\">\n          <div className=\"monitoring-raspi-bloc\">\n            <div className=\"left-raspi\">\n              <p>CPU charge : </p>\n              <p>Memory charge : </p>\n              <p>Uptime : </p>\n            </div>\n            <div className=\"seconde-bloc-raspi\">\n              <p>Disk space :</p>\n              <p>Network interface :</p>\n              <p>Heat : {heat}</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n      <div className=\"title-super-vision\">\n        <h3>\n          <Icon className=\"logo-title-super-vision\" type=\"unordered-list\" />\n          List of equipment\n          <span style={{ color: \"green\" }}> connected</span> to the network\n        </h3>\n      </div>\n      <div className=\"collection-super-vision\">\n        <Collapse>\n          <Panel header=\"IP : - NAME : \" key=\"1\">\n            <Collapse defaultActiveKey=\"1\">\n              <Panel header=\"Graph\" key=\"1\">\n                <p>Graph</p>\n              </Panel>\n            </Collapse>\n          </Panel>\n        </Collapse>\n      </div>\n    </>\n  );\n};\n\nexport default Supervision;\n","import React from \"react\";\nimport \"./Accueil.css\";\nimport { Icon } from \"antd\";\n\nconst Accueil: React.FC = () => {\n  return (\n    <>\n      <h1>\n        <Icon type=\"sync\" /> Bienvenue sur l'application de monitoring en temps\n        réel\n      </h1>\n      <h2>Technologies utilisés :</h2>\n      <h3>\n        <Icon type=\"right\" /> Server Socket.IO pour executer les commandes et\n        récupérer les données en temps réel\n      </h3>\n      <h3>\n        <Icon type=\"right\" /> React 16 en TypeScript\n      </h3>\n      <h3>\n        <Icon type=\"right\" /> Raspberry ( Rasbian Buster )\n      </h3>\n      <h3>\n        <Icon type=\"right\" /> SNMP\n      </h3>\n    </>\n  );\n};\n\nexport default Accueil;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Menu, Icon } from \"antd\";\nimport \"./Navbar.css\";\nimport Terminal from \"../Terminal/Terminal\";\nimport Supervision from \"../Supervision/Supervision\";\nimport Accueil from \"../Accueil/Accueil\";\n\nconst Navbar: React.FC = () => {\n  return (\n    <>\n      <Router>\n        <Menu mode=\"horizontal\">\n          <Menu.Item>\n            <Link to=\"/\">\n              <Icon type=\"home\" />\n              Accueil\n            </Link>\n          </Menu.Item>\n          <Menu.Item>\n            <Link to=\"/terminal/\">\n              <Icon type=\"code\" />\n              Terminal\n            </Link>\n          </Menu.Item>\n          <Menu.Item>\n            <Link to=\"/dashboard/\">\n              <Icon type=\"dashboard\" />\n              Supervision\n            </Link>\n          </Menu.Item>\n        </Menu>\n        <Route path=\"/\" exact component={Accueil} />\n        <Route path=\"/terminal/\" component={Terminal} />\n        <Route path=\"/dashboard/\" component={Supervision} />\n      </Router>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Home.css\";\nimport Navbar from \"../Navbar/Navbar\";\n\nconst Home: React.FC = () => {\n  return (\n    <>\n      <Navbar />\n    </>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./components/Home/Home\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
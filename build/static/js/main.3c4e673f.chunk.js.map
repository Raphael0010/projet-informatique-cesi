{"version":3,"sources":["components/Terminal/Terminal.tsx","components/Supervision/Supervision.tsx","components/Accueil/Accueil.tsx","components/Navbar/Navbar.tsx","components/Home/Home.tsx","serviceWorker.ts","index.tsx"],"names":["Terminal","_useState","useState","_useState2","Object","slicedToArray","historique","setHistorique","_useState3","_useState4","commandLine","setCommandLine","_useState5","_useState6","setCommandLineReturn","_useState7","_useState8","setPwd","url","sendCommand","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","socket","wrap","_context","prev","next","abrupt","trim","openNotification","getPwd","socketIOClient","on","c","cmd","result","concat","toConsumableArray","console","log","emit","stop","apply","this","arguments","message","notification","open","description","useEffect","react_default","createElement","Fragment","className","input","onKeyDown","event","keyCode","style","width","value","onChange","target","placeholder","map","m","k","icon","type","Supervision","Accueil","Navbar","react_router_dom","menu","mode","Item","to","react_router","path","exact","component","Home","components_Navbar_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","components_Home_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c4e673f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Input, Button, notification, Icon } from \"antd\";\nimport socketIOClient from \"socket.io-client\";\nimport { IHistory } from \"../../interface/IHistory\";\nimport \"./Terminal.css\";\n\nconst Terminal: React.FC = () => {\n  const [historique, setHistorique] = useState<IHistory[]>([]);\n  const [commandLine, setCommandLine] = useState(\"\");\n  const [commandLineReturn, setCommandLineReturn] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n  const url = \"http://127.0.0.1:3030\";\n\n  const onChangeCommandLine = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommandLine(event.target.value);\n  };\n\n  const sendCommand = async () => {\n    if (commandLine === \"clear\") {\n      setHistorique([]);\n      setCommandLine(\"\");\n      return;\n    }\n    if (commandLine.trim() === \"\") {\n      openNotification(\"Veuillez rentrer une commande valide i\");\n      return;\n    }\n    getPwd();\n    const socket = socketIOClient(url);\n    socket.on(\"cmd return\", (c: any) => {\n      if (c === \"wrongcmd\") {\n        openNotification(\"Veuillez rentrer une commande valide !\");\n        return;\n      }\n      setCommandLineReturn(c);\n      setHistorique(historique => [\n        { cmd: commandLine, result: c },\n        ...historique\n      ]);\n    });\n    socket.on(\"error\", (c: any) => {\n      setCommandLineReturn(c);\n      console.log(\"Error : \" + c);\n    });\n    socket.emit(\"cmd\", commandLine);\n    setCommandLine(\"\");\n  };\n\n  const getPwd = () => {\n    const socket = socketIOClient(url);\n    socket.on(\"cmd return\", (c: any) => {\n      setPwd(c);\n    });\n    socket.emit(\"cmd\", \"pwd\");\n  };\n\n  const sendCommandEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      if (commandLine.trim() === \"\") {\n        openNotification(\"Veuillez rentrer une commande valide !\");\n        return;\n      }\n      sendCommand();\n    }\n  };\n\n  const openNotification = (message: string) => {\n    notification.open({\n      message: \"Notification\",\n      description: message\n    });\n  };\n\n  useEffect(() => {\n    getPwd();\n  }, []);\n\n  return (\n    <>\n      <div className=\"terminal\">\n        <Input\n          onKeyDown={sendCommandEnter}\n          style={{ width: \"100%\" }}\n          value={commandLine}\n          onChange={onChangeCommandLine}\n          placeholder=\">\"\n        />\n        <div className=\"history\">\n          <code>\n            {historique.map((m, k) => (\n              <>\n                <Icon type=\"code\" />\n                <strong> {m.cmd}</strong>\n                <br />\n                <pre>{m.result}</pre>\n              </>\n            ))}\n          </code>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Terminal;\n","import React from \"react\";\nimport { Icon } from \"antd\";\nimport \"./Supervision.css\";\n\nconst Supervision: React.FC = () => {\n  return (\n    <>\n      <div className=\"title-super-vision\">\n        <h3>\n          <Icon className=\"logo-title-super-vision\" type=\"unordered-list\" />\n          Liste des équipements connectés\n        </h3>\n      </div>\n    </>\n  );\n};\n\nexport default Supervision;\n","import React from \"react\";\nimport \"./Accueil.css\";\n\nconst Accueil: React.FC = () => {\n  return <>Accueil</>;\n};\n\nexport default Accueil;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Menu, Icon } from \"antd\";\nimport \"./Navbar.css\";\nimport Terminal from \"../Terminal/Terminal\";\nimport Supervision from \"../Supervision/Supervision\";\nimport Accueil from \"../Accueil/Accueil\";\n\nconst Navbar: React.FC = () => {\n  return (\n    <>\n      <Router>\n        <Menu mode=\"horizontal\">\n          <Menu.Item>\n            <Link to=\"/\">\n              <Icon type=\"home\" />\n              Accueil\n            </Link>\n          </Menu.Item>\n          <Menu.Item>\n            <Link to=\"/terminal/\">\n              <Icon type=\"code\" />\n              Terminal\n            </Link>\n          </Menu.Item>\n          <Menu.Item>\n            <Link to=\"/dashboard/\">\n              <Icon type=\"dashboard\" />\n              Supervision\n            </Link>\n          </Menu.Item>\n        </Menu>\n        <Route path=\"/\" exact component={Accueil} />\n        <Route path=\"/terminal/\" component={Terminal} />\n        <Route path=\"/dashboard/\" component={Supervision} />\n      </Router>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Home.css\";\nimport Navbar from \"../Navbar/Navbar\";\n\nconst Home: React.FC = () => {\n  return (\n    <>\n      <Navbar />\n    </>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./components/Home/Home\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}